.TITLE "Principais decisões de design do C#"
.AUTHOR "Bento Borges Schirmer"
.PRINTSTYLE TYPESET
.PAPER A4
.L_MARGIN 3c
.R_MARGIN 2c
.T_MARGIN 3c
.B_MARGIN 2c
.PT_SIZE 12
.BLOCKQUOTE_QUAD JUSTIFY
.JUSTIFY
.\"HEADING_STYLE 2 NUMBER
.START
.\"TODO check spacing before code
.nr LISTING_COUNT 0 1
.de LISTING
.ie \\n(.$=2 \{
.    ds LISTING_CAPTION \\$2
.    FLOAT TARGET "\\$1"
.    LS -5
.    CODE
.\}
.el \{\
.    LS +5
.    LABEL "Listagem \\n+[LISTING_COUNT]." CAPTION "\\*[LISTING_CAPTION]"
.    FLOAT OFF
.\}
..
.CITATION
.PP
I still remember my first look at C# in the early 2000s. Microsoft had released
the first major version of the language.  I recall thinking that it was Java,
except that Microsoft made it, called it something else, and put it into Visual
Studio.  And I wasn’t alone in this sentiment. In an old interview, Java
inventor James Gosling called it an imitation. “It’s sort of Java with
reliability, productivity, and security deleted,” he said. Ouch.
.PP
When you go back and look, C# version 1 really did look an awful lot like Java.
As part of its stated design goals for ECMA, it sought to be a “simple, modern,
general purpose object-oriented language.” At the time, it could have done
worse thank looking like Java in order to achieve those goals.
.CITATION END
.HEADING 1 "Elementos da linguagem"
.PP
O presente relatório procura passar rapidamente sobre as principais
facilidades do C#, e discutir com mais atenção \fIdesgin patterns\fP,
deficiências da linguagem e truques diversos.
.HEADING 2 "Atributos e métodos \(OK"
.PP
Atributos e métodos podem ser adicionados a tipos do C#. Métodos
podem ser de instância ou estáticos. A seção
.PDF_LINK heranca *
discute sobreescrita e ocultação de métodos, tanto de instância quanto
estáticos, e sobre métodos e classes que postergam a implementação com
\*[CODE]\%abstract\*[CODE X]\&.
Atributos e métodos têm níveis de acesso, que são discutidos na seção
.PDF_LINK access SUFFIX . *
.PP
É possível injetar novos métodos de instância em tipos existentes, sem
acesso ao código\%-fonte deles, usando "métodos de extensão", que são
métodos estáticos dentro de classes estáticas, cujo primeiro parâmetro
é prefixado com \*[CODE]this\*[CODE X]\&.
A forma estática dos métodos de extensão ainda pode ser usada. Se
forem genéricos, métodos de extensão podem ser chamados em outros
métodos genéricos.
Reiterando com mais ênfase, sua única utilidade é estender tipos que o
programdor não controla, como da BCL, do .NET e de bibliotecas de
terceiros.
Se o programdor tem controle sobre um tipo, a seção
.PDF_LINK heranca *
discute a alternativa superior de usar implementação padrão em
interfaces para implementar tipos de classe.
O principal uso é lubrificar a interação entre APIs e código de
aplicação, e mitigar deficiências de APIs, ainda que isso devesse
ocorrer \fIupstream\fP.
.PP
Uniões são simuladas com as anotações de compilador
\*[CODE]\%StructLayoutAttribute\*[CODE X] e
\*[CODE]\%FieldOffsetAttribute\*[CODE X]\&.
.PP
A
.PDF_LINK nextafter SUFFIX , "Listagem 1"
que copia a implementação do blog Realtime Madness,\c
.FOOTNOTE
.PDF_WWW_LINK http://realtimemadness.blogspot.com/2012/06/nextafter-in-c-without-allocations-of.html
.FOOTNOTE OFF
 mostra o uso de ambos união e métodos de extensão para adicionar
a função \*[CODE]nextafterf()\*[CODE X] do C no C#,
semelhante ao
\*[CODE]float.BitIncrement()\*[CODE X] e
\*[CODE]float.BitDecrement()\*[CODE X] introduzidos no .NET 7.
As três
APIs implementam as operações gerais homogêneas
\*[CODE]nextUp\*[CODE X] e \*[CODE]nextDown\*[CODE X] do IEEE 754, que
avaliam o próximo número de ponto flutuante representável ao fornecido, ou o
anterior.
Ainda na
.PDF_LINK nextafter SUFFIX , "Listagem 1"
vê-se que a união funciona posionando manualmente os atributos
\*[CODE]f\*[CODE X] e \*[CODE]i\*[CODE X], que possuem o mesmo
tamanho, no início da \*[CODE]struct Pun\*[CODE X]\&. A especificação
do C# permite leitura e escrita de ambos atributos sem restrição.
.PP
A implementação da 
.PDF_LINK nextafter "Listagem 1"
é somente para \*[CODE]float\*[CODE X]\&.
Não é possível fazer um método genérico que trate também
\*[CODE]double\*[CODE X] e \*[CODE]\%decimal\*[CODE X]\&,
pois não têm parentesco. A única abordagem viável sem duplicar código
é gerar código usando, por exemplo, T4.
.LISTING nextafter "Método de extensão para"
.so NextAfter.cs
.LISTING OFF
.HEADING 2 "Propriedades \(OK"
.PP
Propriedades são um mecanismo idiomático de realizar encapsulamento de
dados de tipos. Conforme a tradição, serve três utilidades: 1)
retrocompatibilidade simulando atributos e seus efeitos colaterais
depois que deixam de existir, 2) depuração ao viabilizar
\fIbreakpoints\fP e 3) controle de acesso mais fino, introduzindo
validação e restringindo leitura e escrita.
.PP
Enquanto propriedades agem como atributos, uma variação chamada
"indexador" permite o tipo ser acessado como se fosse um vetor.
Qualquer \*[CODE]IList\*[CODE X] ou \*[CODE]IDictionary\*[CODE X]\&,
seja do .NET ou fornecido pelo usuário, contém indexadores. O
indexador é introduzido pelo tipo dele, seguido de
\*[CODE]this\*[CODE X] e então uma lista de índices entre colchetes,
exatamente como parâmetros. Sobrecarga de indexadores é permitida.
Esses índices ficam disponível no corpo dos acessores, descritos a
seguir.
.PP
Propriedades e indexadores são usados através de acessores.Há três
tipos de acessores: o acessor \*[CODE]get\*[CODE X] é chamado para
"ler", \*[CODE]set\*[CODE X] é chamado para "escrever" e
\*[CODE]init\*[CODE X] para "escrever" no máximo uma vez. Uma
propriedade ou indexador e seus acessores podem cada um ter um nível
de acesso, os mesmos descritos em 
.PDF_LINK access SUFFIX . *
Se a propriedade ou indexador for \*[CODE]ref\*[CODE X]\&, somente o
acessor \*[CODE]get\*[CODE X] pode ser declarado, e caso não se queira
escrita no tipo devolvido por referência, basta usar \*[CODE]ref
readonly\*[CODE X]\&. Se uma propriedade ou indexador apresenta
somente \*[CODE]get\*[CODE X], este pode ser substituido junto com os
caracteres de abre e fecha-chaves por um \fIexpression body\fP
prefixado com \*[CODE]=>\*[CODE X].
Caso nenhum acessor tenha um corpo, diz-se que a propriedade é
auto-implementada, ou seja, um \fIbacking field\fP é gerado
automaticamente.
Uma propriedade ou indexador cujos acessores tenham um corpo devem
gerenciar manualmente seus \fIbacking fields\fP, isto é, meramente
seus atributos subjacentes.
A palavra-chave \*[CODE]value\*[CODE X] é usada para conhecer o valor
fornecido para o \*[CODE]set\*[CODE X] e \*[CODE]init\*[CODE X] de uma
propriedade, enquanto o corpo de um \*[CODE]get\*[CODE X] deve
devolver algo com \*[CODE]return\*[CODE X]\&.
Finalmente, uma propriedade pode ser atribuída algum valor
textualmente após seus acessores, isso ocorre antes do construtor ser
chamado.
.HEADING 2 NAMED heranca "Herança e polimorfismo"
.PP
Discutir classes de tipos.
.HEADING 2 NAMED ctor "Construtores, destrutores e instanciação"
.PP
Destruturores, chamados de finalizadores no C#, foram defasados e sua
discussão é irrelevante. A alternativa superior e segura é o método
\*[CODE]Dispose()\*[CODE X] do \*[CODE]IDisposable\*[CODE X] e,
opcionalmente, o método \*[CODE]DisposeAsync()\*[CODE X] do
\*[CODE]IAsyncDisposable\*[CODE X]\&. Esse métodos são chamados
garantidamente e automaticamente pela construção
\*[CODE]using\*[CODE X], irrespectivo de \*[CODE]goto\*[CODE X],
\*[CODE]return\*[CODE X], exceções ou outros \*[CODE]using\*[CODE X]
aninhados.
.PP
Tipos podem ser gerenciados, não gerenciados ou delegados. Delegados é
um nome bonito para ponteiro de função, mas papagaios dirão que são
diferentes (apesar de não haver diferença), mas ponteiros existem tais
como são no C#, em contextos inseguros. Tipos gerenciados são
controlados pelo coletor de lixo, são obrigatoriamente passados por
referência, e vivem na "\fIheap\fP". Tipos não gerenciados sobrevivem
enquanto forem copiados.  Tipos gerenciados e não gerenciados podem
conter um ao outro sem restrições.
Tipos não gerenciados heram de \*[CODE]ValueType\*[CODE X], e
compreendem \*[CODE]struct\*[CODE X]s, tuplas de valor e tipos
primitivos como \*[CODE]int\*[CODE X] e \*[CODE]float\*[CODE X]\&.
\*[CODE]string\*[CODE X] é um tipo muito especial.
.PP
Construtores se parecem sintaticamente com métodos, mas são
simplesmente o nome do tipo seguido de uma lista de parâmetros.
Construtores podem ser sobrecarregados.  Construtores são apenas
metade da inicialização de um tipo: são executados depois dos
atributos e propriedades serem inicializados. \" TODO
.PP
Toda \*[CODE]struct\*[CODE X], na verdade todos os tipos de valor,
possuem um construtor implícito sem parâmetros chamado construtor
\fIdefault\fP, que é equivalente à memória zerada, e fornece o chamado
valor \*[CODE]default\*[CODE X]. Ainda que o usuário declare um
construtor sem parâmetros para uma \*[CODE]struct\*[CODE X] que
atribui valores à vários atributos, o construtor
\*[CODE]default\*[CODE X] ainda é usado para o conteúdo de vetores e
expressões \*[CODE]default\*[CODE X]\&.
.PP
A ordem de inicialização estática é bastante cabeluda, complicada por
questões de desempenho, como o atributo implícito
\*[CODE]BeforeFieldInit\*[CODE X] que introduz comportamento não
específico. Dependências circulares são especialmente perigosas
durante a inicialização estática, e há histórias da inicialização
estática causar \fIdeadlocks\fP ou \fIcrashar\fP a aplicação
silenciosamente.
Apesar de tudo, a inicialização estática é atômica, o que é
enormemente crucial para implementar o \fIdesign pattern singleton\fP,
funcionando até em situações \fImulti-thread\fP.
.PP
No rastreamento de pilha, \*[CODE]ctor\*[CODE X] simboliza
construtores de instância, e \*[CODE]cctor\*[CODE X] simboliza
construtores estáticos.
.PP
boxing
.PP
ref e stackalloc
.PP
Recentemente (quando?) foi introduzido uma facilidade que,  foram
introduzidos os records, que é a implementação automática de structs
ou classes imutáveis, uma facilidade que exige pouco código.
.HEADING 2 "Tratamento de exceções \(OK"
.PP
O sistema de tratamento de exceções do C# não tem nada fora do comum.
O \fIstatement\fP \*[CODE]throw\*[CODE X] lança exceções, estas
flutuam de método em método até ser capturada com cláusulas 
\*[CODE]try..catch..finally\*[CODE X]\&. As cláusulas
\*[CODE]catch\*[CODE X] e \*[CODE]finally\*[CODE X] são opcionais, mas
pelo menos uma deve ocorrer após um \*[CODE]try\*[CODE X]\&. Várias
cláusulas \*[CODE]catch\*[CODE X] para diferentes exceções podem ser
declaradas, sendo a mais específica a escolhida para executar,
considerando a hie\%rar\%quia de exceções. A última cláusula
\*[CODE]catch\*[CODE X] pode omitir o tipo de exceção para capturar
qualquer uma, e a variável contendo a exceção capturada pode ser
omitida se não for necessária. Uma exceção pode ser re-lançada
dentro da cláusula \*[CODE]catch\*[CODE X], ou outra nova e diferente
mais apropriada, mas às vezes é mais fácil ou correto não capturar a
exceção. Cláusulas \*[CODE]try..catch..finally\*[CODE X] podem se
aninhar recursivamente.
.PP
Diferente do Java, o C# não distingue exceções verificadas e não
verificadas, isto é, o C# não fornece mecanismo para a assinatura dos
métodos anunciarem quais exceções podem ser lançadas e
obrigatoriamente capturadas. O usuário depende da documentação e
tentativa e erro para descobrir quais exceções um método pode talvez
lançar, sendo a marcação XML
\*[CODE]<exception ..</exception>\*[CODE X] a que documenta isso em
comentários.
.PP
Sobre o clássico problema da interação entre \*[CODE]return\*[CODE X]
e \*[CODE]finally\*[CODE X]: \*[CODE]return\*[CODE X] é proibido em
uma cláusula \*[CODE]finally\*[CODE X]\&. Se houver um
\*[CODE]return\*[CODE X] dentro de uma cláusula \*[CODE]try\*[CODE X]
ou \*[CODE]catch\*[CODE X], há duas possibilidades: 1) se o tipo
devolvido for gerenciado, alterações da instância dentro da cláusula
\*[CODE]finally\*[CODE X] será visível para quem chamou o método, e 2)
alterações em tipos não gerenciados ocorrerão em uma cópia na cláusula
\*[CODE]finally\*[CODE X] após o \*[CODE]return\*[CODE X] executar.
.PP
Exceções jamais devem ser lançadas dentro do método comum
\*[CODE]ToString()\*[CODE X]\&.
.PP
Tratamento de exceções na Unity é deprimente.
Tanto o \*[CODE]Debug.Assert()\*[CODE X] quanto
\*[CODE]UnityEngine.Assertions.Assert.IsTrue()\*[CODE X] não
funcionam, mesmo que a documentação Unity diga que há como
habilita-las e força-las, ou uma nota de atualização diga que foram
consertadas: não é verdade!
Além disso, na tentativa de ser amigável para iniciantes, exceções
nunca invocam o depurador, pois ao invés disso, o
\*[CODE]GameObject\*[CODE X] morre silenciosamente para que o jogo
continue funcionando "normalmente".  O único jeito de depurar jogos em
Unity é à moda antiga: imprimindo no \*[CODE]Debug.Log\*[CODE X] e
posicionando \fIbreakpoints\fP manualmente na tentativa e erro.
.PP
Ainda que a regra seja nunca usar exceções para tratar erros de
programação e nunca usa-las para controlar a execução normal de
código, duas vezes a Microsoft decidiu dar um novo propósito às
exceções: parar \fIthreads\fP e cancelar \fItasks\fP, através de
\*[CODE]\%ThreadInterruptedException\*[CODE X] e
\*[CODE]TaskCanceledException\*[CODE X]\&.
Como consequência, \fIthreads\fP e \fItasks\fP morrem silenciosamente,
e o depurador nunca consegue intercepta\%-las antes.
Mesmo que haja documentação de alguma configuração mágica no Visual
Studio que faça exceções funcionarem em situações \fImulti-thread\fP:
não funciona! Uma gambiarra para \fItasks\fP é chamar algum
\*[CODE]\&.ContinueWith(a => Debug.Log(a.Exception),
\%TaskContinuationOptions.OnlyOnFaulted);\*[CODE X]\&. Outra opção é
aninhar todo o corpo de todas as \fIthreads\fP e \fItasks\fP suspeitas
manulamente em um \*[CODE]try..catch\*[CODE X] gigante. Senão isso,
então imprimir coisas na tentativa e erro e depois posicionar um
\fIbreakpoint\fP até reproduzir o problema. 
.HEADING 2 NAMED access "Encapsulamento e ocultação de informação \(OK"
.PP
Os membros de uma classe podem ser protegidos pelos seguintes
modificadores de acesso:
\*[CODE]private\*[CODE X],
\*[CODE]private protected\*[CODE X],
\*[CODE]protected\*[CODE X],
\*[CODE]internal\*[CODE X],
\*[CODE]public\*[CODE X] e \*[CODE]file\*[CODE X]\&.
O modificador \*[CODE]internal\*[CODE X] restringe a acessibilidade do
membro à objetos que estão no mesmo \fIassembly\fP. \fIAssemblies\fP
são uma forma de organizar manualmente classes do C#, para aumentar a
velocidade de compilação.
Um elemento modificado com \*[CODE]file\*[CODE X] só pode ser
usado por outros elementos presentes no mesmo arquivo da declaração.
Os modificadores \*[CODE]private\*[CODE X], \*[CODE]public\*[CODE X] e
\*[CODE]protected\*[CODE X] cumprem seus papéis originais:
respectivamente, limita visibilidade somente para dentro do tipo onde
está, não limita visibilidade, e limita visibilidade às classes
derivadas.
Obviamente, reflexão pode contornar todas essas restrições.
.HEADING 2 "Interfaces \(OK"
.PP
Inicialmente podem ser vistas como uma forma de herança-múltipla, mas
as interfaces brilham se vistas como "classes de tipo", ou
simplesmente "os tipos". Interfaces podem definir métodos com uma
implementação padrão interagindo com outros membros definidos nela ou
em interfaces que descende, e até mesmo proibir sobreescrita com
\*[CODE]sealed\*[CODE X]\&. Infelizmente, a implementação padrão não
consegue implementar membros definidos em interfaces da qual deriva.
Interfaces podem definir métodos e propriedades \*[CODE]static
abstract\*[CODE X], que são membros estáticos que podem ser
sobreescritos em tipos que implementam a interface, o que é
absurdamente vital pra definir dados e comportamentos específicos sem
inchar as instâncias, ou mesmo sem ter uma. Quando duas interfaces
definem métodos e propriedades com a mesma assinatura, a implementação
é compartilhada, porém um tipo pode ter uma interface principal e
implementar métodos somente para ela, e implementar as demais com
assinaturas idênticas separadamente, prefixando o nome da interface
como se fosse parte de um \fInamespace\fP.
.HEADING 2 "Classes aninhadas e funções locais \(OK"
.PP
Classes aninhadas e funções locais são bastante simples, literalmente
uma classe declarada dentro de outra, ou uma função declarada dentro
de outro método. A classe aninhada possui menor visibilidade, sendo
acessada de fora como se a classe que a contém fizesse parte do
\fInamespace\fP. Não há equivalente no C# às classes aninhadas não
estáticas do Java, que é quando a classe aninhada deve ser instanciada
a partir de uma instância pré-existente da classe que a contém, e fica
presa a ela e tem acesso aos seus membros. Funções locais são
exclusivas para o método que as contém. No geral, ambos classes
aninhadas e funções locasis são excelentes para organizar código.
.HEADING 2 "Classes anônimas \(OK"
.PP
É possível criar objetos com atributos arbitrários, e fazer vetores
destes, sem declarar tipos antes. Diferente do Java, não é possível
que esse objeto estenda uma classe e sobreescreva seus métodos.  No
geral, não têm muita serventia. Seu uso é de mau gosto, bem como todos
os usos de \*[CODE]var\*[CODE X]\&.  Geralmente é encontrado em
gambiarras feitas correndo, como alguma seria\%li\%zação de dados, e
usando muita reflexão, por sinal. A
.PDF_LINK geojson "Listagem 2"
é exemplo disso.
.LISTING geojson "Impressão de GeoJSON implementada com pouco esforço"
.so GeoJson.cs
.LISTING OFF
.HEADING 2 "Classes parciais \(OK"
.PP
A declaração de classes e \*[CODE]struct\*[CODE X]s pode ser espalhada
em vários arquivos usando o modificador \*[CODE]partial\*[CODE X]\&. A
única utilidade é separar código gerado de código autoral, quando T4
estiver sendo utilizado, por exemplo. Os outros usos são forte
indicativo de \fIcode smell\fP ou algum \fIanti-pattern\fP, como \fIgod
object\fP, pois o tipo deve estar inchado e fazendo "demais".
.HEADING 2 "Tipos genéricos"
.PP
Não há overload de tipos genéricos, eles são diferenciados em IL pela
quantidade de argumentos. Então, é preciso usar nomes de tipo diferentes.
.PP
A inferência é fraca
.PP
Tipos fantasmas não são viáveis.
.HEADING 2 "Closures \(OK"
.PP
Existem expressões lambda em C#, porém a captura de objetos é anti-intuitiva!
Linguagens como C++ permitem especificar como cada objeto é capturado, de modo
que o usuário pode fazer cópias ou manter referências conforme adequado. Não é
o caso no C#!
.PP
A execução da
.PDF_LINK lambda "Listagem 4"
imprimirá dez vezes o número dez, ao invés de uma sequência de zero
até nove.  O que ocorre é que cada expressão lambda gera uma classe, e
a expressão lambda em si se torna um método dessa classe, e os objetos
capturados, atributos dessa classe. Essa implementação orientada a
objetos de expressões lambda permite a persistência dos objetos, que
posteriormente são limpos sob responsabilidade do coletor de lixo, mas
gera comportamentos surpreendentes, como o da
.PDF_LINK lambda SUFFIX : "Listagem 4"
o laço de repetição itera sobre o atributo de um único objeto
instanciado a partir da classe implícita, ao invés de uma variável
local \*[CODE]i\*[CODE X], e no final todas as expressões lambda
enxergam apenas o valor final dela.
Por causa dessa limitação, expressões lambda deixam de ser tão úteis e
simples. No final, escrever classes e métodos ordinários garante
comportamentos previsíveis, e o desempenho é mais alto de qualquer
modo.
.LISTING lambda "Um tiro no pé usando expressões lambda"
Action[] cbs = new Action[10];

for (int i = 0; i < cbs.Length; i++)
    cbs[i] = () => Console.WriteLine(i);
for (int i = 0; i < cbs.Length; i++)
    cbs[i]();
.LISTING OFF
.HEADING 1 "Referências"
.PP
DIETRICH, Eric; SMACCHIA, Patrick. C# Version History: Examining the Language
Past and Present. In: ndepend. \fBNDepend Blog\fP.  7 jul. 2017. Disponível em:
https://blog.ndepend.com/c-versions-look-language-history/. Acesso em 11 sep.
2024.
.PP
https://csharpindepth.com/articles/BeforeFieldInit
