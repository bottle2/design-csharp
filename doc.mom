.TITLE "Principais decisões de design do C#"
.AUTHOR "Bento Borges Schirmer"
.PRINTSTYLE TYPESET
.PAPER A4
.L_MARGIN 3c
.R_MARGIN 2c
.T_MARGIN 3c
.B_MARGIN 2c
.PT_SIZE 12
.JUSTIFY
.START
.PP
I still remember my first look at C# in the early 2000s. Microsoft had released
the first major version of the language.  I recall thinking that it was Java,
except that Microsoft made it, called it something else, and put it into Visual
Studio.  And I wasn’t alone in this sentiment. In an old interview, Java
inventor James Gosling called it an imitation. “It’s sort of Java with
reliability, productivity, and security deleted,” he said. Ouch.
.PP
When you go back and look, C# version 1 really did look an awful lot like Java.
As part of its stated design goals for ECMA, it sought to be a “simple, modern,
general purpose object-oriented language.” At the time, it could have done
worse thank looking like Java in order to achieve those goals.
.HEADING 1 "Elementos da linguagem"
.HEADING 2 "Atributos e métodos"
.PP
A partir, disso, é possível simular enums.
.HEADING 2 "Propriedades"
.PP
Três utilidades particularmente interessantes são: 1) depuração, 2) retro, 3)
controle de acesso
.PP
Um recurso interessante introduzido foi propriedades auto-implementadas.  Isso
cria um atributo automaticamente, particular à sua propriedade, e interagido
com a palavra-chave \*[CODE]value\*[CODE X].
.PP
Uma propriedade especial é o indexador. Assim como as demais propriedades, get,
set e init podem ser definidos para as diferentes operações de leitura
.PP
No caso de propriedades por referência usando \*[CODE]ref\*[CODE X], apenas get
pode ser usado, pois o compilador não diferencia mais leitura e escrita e o
chamador controla isso agora.
.HEADING 2 "Herança"
.HEADING 2 "Polimorfismo"
.HEADING 2 NAMED ctor "Construtores e destrutores"
.PP
O construtor e o destrutor, este chamado de finalizador no C#, têm o mesmo nome
do tipo, com o destrutor se diferenciando por ter um til “~” prefixado. Ambos
se parecem sintaticamente com funções, mas não apresentam um tipo de devolução,
nem mesmo void. Construtores podem ter vários overloads, mas o destrutor só
pode ser um, declarado sem parâmetros.
.PP
O uso de destrutores foi defasado, e é preferido que o tipo implemente o método
Dispose do IDisposable, e opcionalmente DisposeAsync do IAsyncDisposable. (Por
quê?)
.PP
Construtores são apenas metade da inicialização de uma tipo: são executados
depois dos atributos e propriedades serem inicializados.
.PP
A ordem de inicialização estática é bastante cabeluda, complicada por questões
de desempenho. É comum cometer acessar atr 1) \*[CODE]BeforeFieldInit\*[CODE X] 2) Apesar de
tudo, a inicialização estática é atômica, de modo que é seguro usar Singletons
em situações. Grafo de dependência. multithread, mesmo com BeforeFieldInit.
Finalmente
.PP
Toda struct, na verdade todos os tipos de valor, possuem um construtor
implícito sem parâmetros chamado construtor default, que é equivalente à
memória zerada, e fornece o chamado valor default. Ainda que o usuário declare
um construtor sem parâmetros para uma struct, o valor default ainda é usado
para o conteúdo de vetores e expressões default.
.PP
Recentemente (quando?) foi introduzido uma facilidade que,  foram introduzidos
os records, que é a implementação automática de structs ou classes imutáveis,
uma facilidade que exige pouco código.
.PP
No rastreamento de pilha, \*[CODE]ctor\*[CODE X] simboliza construtores de
instância, e \*[CODE]cctor\*[CODE X] simboliza construtores estáticos.
.HEADING 2 "Tratamento de exceções"
.PP
Nunca lance exceções dentro de ToString()!!!!!!!!
.PP
O tratamento de exceções é bastante comum, iniciado com o \fIstatement\fP
\*[CODE]throw\*[CODE X] e capturado com a cláusula \*[CODE]try { ... } catch {
... } finally { ... }\*[CODE X].
.PP
a
.PP
A respeito do clássico problema da interação entre \*[CODE]return\*[CODE X] e \*[CODE]finally\*[CODE X]:
.QUOTE
.CODE
int func() {
    try {
        return 1;
    } finally {
        return 2;
    }
}
.QUOTE OFF
.PP
Foi decidido que isso é proibido. E na seguinte situação:
.QUOTE
.CODE
Console.WriteLine(func());
int func() {
    int x = 1;
    try {
        return x;
    } finally {
        x = 2;
    }
}
.QUOTE OFF
.PP
O valor impresso é 1. Foi decidido que é devolvido o valor avaliado no momento,
e atribuições do finally não são visíveis ao return, mas mudanças de estado em
objetos de referência, sim:
.QUOTE
.CODE
Console.WriteLine(func().x);
Foo func() {
    Foo x = new() { x = 1 };
    try {
        return x;
    } finally {
        x.x = 2;
    }
}
class Foo { int x {get; set; } }
.QUOTE OFF
.PP
A respeito de asserções, o cenário é deprimente.
Discutir assert.
.PP
Discutir exceções + async + multithread.
.PP
Ainda sobre async, exceções são reutilizadas para controlar a
continuidade de execução de Tasks, através do CancellationToken.IsCancelled.
.HEADING 2 "Encapsulamento e ocultação de informação"
.PP
Os membros de uma classe podem ser protegidos por modificadores de acesso como
\*[CODE]private\*[CODE X], \*[CODE]private protected\*[CODE X],
\*[CODE]protected\*[CODE X], \*[CODE]internal\*[CODE X] e \*[CODE]public\*[CODE X].
O modificador \*[CODE]internal\*[CODE X] restringe a acessibilidade do membro à
objetos que estão no mesmo \fIassembly\fP. \fIAssemblies\fP são uma forma de
organizar manualmente classes do C#, para aumentar a velocidade de compilação e
melhorar a organização do código pela ação do próprio modificador
\*[CODE]internal\*[CODE X].
.HEADING 2 "Instanciação"
.PP
struct vs class
.PP
ValueType
.PP
ref e stackalloc
.HEADING 2 "Interfaces"
.PP
Implementação padrão
.PP
Herança-múltipla
.PP
Interface principal
.PP
Reuso de código (zero)
.PP
Métodos estáticos sobreescrevíveis.
.HEADING 2 "Classes aninhadas"
.PP
São bastante simples, literalmente uma classe declarada dentro de outra.
Parecido com namespace. Acessibilidade muda.
.PP
Excelente forma de organizar código, tão legal quanto funções aninhadas.
.HEADING 2 "Classes anônimas"
.PP
É possível criar objetos com atributos arbitrários, e fazer vetores destes, sem
declarar tipos antes. Diferente do Java, não é possível que esse objeto extenda
uma classe e sobreescreva seus métodos.  No geral, não têm muita serventia. Seu
uso é de mau gosto, bem como todos os usos de \*[CODE]var\*[CODE X].
Geralmente é encontrado em gambiarras feitas correndo, como alguma serialização
de dados, usando muita reflexão por sinal:
.QUOTE
.CODE
using System.Text.Json;

double xMin = XXX;
double yMin = XXX;
double xMax = XXX;
double yMax = XXX;

Console.WriteLine(JsonSerializer.Serialize(new
{
    type = "FeatureCollection",
    features = new[] { new {
        type = "Feature",
        geometry = new
        {
            type = "Polygon",
            coordinates = new[] { new[]
            {
                new[] { xMin, yMin },
                      [ xMin, yMax ],
                      [ xMax, yMax ],
                      [ xMax, yMin ],
                      [ xMin, yMin ],
            }}
        },
        properties = new { id = 0 }
    }}
}));
.QUOTE END
.HEADING 2 "Tipos genéricos"
.PP
Não há overload de tipos genéricos, eles são diferenciados em IL pela
quantidade de argumentos. Então, é preciso usar nomes de tipo diferentes.
.HEADING 2 "Traits"
.PP
Do modo como o C# evoluiu, emergiu um sistema de \fItraits\fP bastante curioso.
Trata-se de recursos da linguagem que dependem que objetos implementem certas
\fIinterfaces\fP, ou então que declarem métodos ou propriedades com certas
assinaturas, sem necessariamente implementar uma interface, ou então
construções interpretadas especialmente pelo compilador. O Base Class Library
(BCL), nesse sentido, fornece \fIinterfaces\fP básicas para viabilizar essas
construções especiais.
.PP
Outro caso é o do \*[CODE]using\*[CODE X], discutido na seção
.PDF_LINK ctor +
.TAB_SET 1 0 5P L
.TAB_SET 2 8P 30P L QUAD
.TAB 1
\*[CODE]using\*[CODE X]\*[TB+]
\*[CODE]IDispose\*[CODE X]
.TAB 1
\*[CODE]await\*[CODE X]\*[TB+]
Algum método acessível com a assinatura \*[CODE]<<TaskType>> GetAwaiter()\*[CODE X]
.TAB 1
\*[CODE]foreach\*[CODE X]\*[TB+]
Algum método GetEnumerator()
.TAB 1
\*[CODE]foreach (ref ...\*[CODE X]\*[TB+]
A propriedade \*[CODE]Current\*[CODE X] do enumerador devolve uma referência com \*[CODE]ref\*[CODE X]
.TQ
.\".FLOAT
.\".TS
.\"l l.
.\"kkk
.\".TE
.\".FLOAT OFF
.HEADING 2 "Closures"
.PP
Existem funções lambda em C#, porém a captura de objetos é anti-intuitiva!
Linguagens como C++ permitem especificar como cada objeto é capturado, de modo
que o usuário pode fazer cópias ou manter referências conforme adequado. Não é
o caso no C#!
.QUOTE
.CODE
Action[] cbs = new Action[10];

for (int i = 0; i < cbs.Length; i++)
    cbs[i] = () => Console.WriteLine(i);
for (int i = 0; i < cbs.Length; i++)
    cbs[i]();
.QUOTE END
.PP
A execução imprimirá dez vezes o número dez, ao invés de uma sequência de zero
até nove.  O que ocorre é que cada função lambda gera uma classe, e a função em
si se torna um método dessa classe e os objetos capturados, atributos dessa
classe. Essa implementação orientada a objetos de funções lambda permite a
persistência dos objetos, que posteriormente são limpos sob responsabilidade do
coletor de lixo, mas gera comportamentos surpreendentes, como o do exemplo: o
laço de repetição itera sobre o atributo da classe implícita, ao invés de uma
variável local \*[CODE]i\*[CODE X], e no final todas as funções lambda enxergam
apenas o valor final dela.
Por causa dessa limitação, funções lambda deixam de ser tão úteis e simples. No
final, escrever classes e métodos ordinários garante comportamentos
previsíveis, e o desempenho é mais alto de qualquer modo.
.HEADING 1 "Referências"
.PP
DIETRICH, Eric; SMACCHIA, Patrick. C# Version History: Examining the Language
Past and Present. In: ndepend. \fBNDepend Blog\fP.  7 jul. 2017. Disponível em:
https://blog.ndepend.com/c-versions-look-language-history/. Acesso em 11 sep.
2024.
.PP
https://csharpindepth.com/articles/BeforeFieldInit
