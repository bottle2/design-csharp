.TITLE "Geração de código com T4"
.SUBTITLE "Trabalho 2"
.ATTRIBUTE_STRING ""
.AUTHOR "Bento Borges Schirmer"
.\".FOOTNOTE_MARKER_STYLE NUMBER
.PRINTSTYLE TYPESET
.PAPER A4
.L_MARGIN 3c
.R_MARGIN 2c
.T_MARGIN 3c
.B_MARGIN 2c
.PT_SIZE 12
.JUSTIFY
.START
.PP
A tecnologia apresentada neste relatório é o Text Template
Tranformation Toolkit, abreviada T4, e é usada para geração de texto
em tempo de compilação ou tempo de execução. A ferramenta foi criada
em 2005 pela Microsoft para o Visual Studio. O nome T4 se assemelha
com o da ferramenta UNIX m4, que remonta 1977, e que serve os mesmos
propósitos. No entanto, T4 e m4 diferem fundamentalmente, no sentido
de que m4 funciona avaliando macros recursivamente, enquanto T4
interpola livremente texto corrido e código em C# ou Visual Basic, de
modo muito parecido com PHP. Não se sabe se as similaridades entre T4,
m4 e PHP são acidentais ou premeditadas.
.PP
O T4 é apresentado neste relatório gerando código para simular
enumerações do Java em C#, especificamente o exemplo dos planetas do
sistema solar, encontrado no guia às enumerações do Java\[tm] 5.0.\c
.FOOTNOTE
https://docs.oracle.com/javase/1.5.0/docs/guide/language/enums.html
.FOOTNOTE OFF
 O exemplo é reproduzido integralmente na
.PDF_LINK java SUFFIX . "Listagem 1"
Geração de código permite resolver de modo sucinto e eficiente uma
gama de problemas que é impossível ou intratável de expressar
idiomaticamente na maioria das linguagens de programação. No caso das
enumerações do Java, elas viabilizam associar dados e comportamento à
constantes de enumeração, permitindo modelar enormes porções de dados
estáticos de domínio fixo.
.FLOAT TARGET java
.CODE
.so enum.java
.LABEL "Listagem 1." CAPTION "Os planetas do Java"
.FLOAT OFF
.PP
Outros usos de geração de código é automaticamente gerar métodos de
leitura e escrita de dados em disco, gerar automaticamente métodos de
montagem de pacotes de rede, simplificação de \fIboilerplate\fP e
simular hierarquias não convencionais de objetos.
.PP
Os problemas discutidos podem sim ser resolvidos usando reflexão ou
anotações de compilador, porém a ineficiência da reflexão é notória, e
seu uso ofusca o comportamento do programa com efeitos colaterais não
óbvios.  Em contrapartida, código gerado é muito legível e interage
adequadamente com IntelliSense, permitindo inspeção e depuração fácil.
.PP
No caso particular das enumerações do Java, antes de serem
.PDF_LINK typesafe "Listagem 2"
introduzidas em 2004 de modo sintático, Joshua Bloch recomendou em seu
livro Java Efeito, 1 ed. (2001) que os programadores usassem o chamado
typesafe enums, um \fIdesign pattern\fP. O mesmo pode ser 2001. Um
nome engraçado que causa confusão.
.FLOAT TARGET typesafe
.TAB_SET 1  0  8c L
.TAB_SET 2 8c+18p 7c-18p L
.CODE_SIZE 45
.LS -9
.CODE
.so EnumTypesafe.cs
.LS +9
.CODE_SIZE 100
.LABEL "Listagem 2." CAPTION "Planetas do Java implementado em C# \
com \fItypesafe enum\fP"
.FLOAT OFF
.PP
Neste relatório, T4 é invocado pela linha de comando para transformar
um \fItemplate\fP em um código auto-contido, que é então executado
diretamente, porém em um projeto maior, T4 faz parte do sistema de
\fIbuild\fP e gera código de modo transparente, conforme
\fItemplates\fP são alterados.
.PP
A grande vantagem é que os objetos tem nome acessível por código.
.PP
Enumerações Java é uma das construções mais poderosas.
.PP
A saída desse programa, com o argumento 175 é:
.PP
Infelizmente, não é possível traduzir isso de modo idiomático em C#
.PP
A patente das enumerações do Java sugere que a implementação é um monte de switch.
.PP
Desse modo, o seguinte template:
.PP
Esse exemplo possui ainda mais margem para simplificação: no caso de
uma enumeração que possui muito mais atributos, seria interessante
gerar cada switch..case dentro de um laço for, ao invés de gerar cada
um por vez, o que é na verdade mais um problema de código repetido.
.FLOAT TARGET t4
.TAB_SET 1 0 7c-9p L
.TAB_SET 2 7c+18p 9c-9p L
.CODE_SIZE 50
.LS -8
.CODE
.so Enum.cs.tt
.LS +8
.CODE_SIZE 100
.LABEL "Listagem 3." CAPTION "Código T4 gamer"
.FLOAT OFF
.PP
Gera o seguinte:
.FLOAT TARGET cs
.CODE_SIZE 50
.LS -8
.CODE
.so Enum.cs-annotated
.LS +8
.CODE_SIZE 100
.LABEL "Listagem 4." CAPTION "Código final em C#"
.FLOAT OFF
.PP
Novamente, a seguinte saída:
